{"version":3,"file":"component---src-pages-index-tsx-cf3ec8aee6a224672d77.js","mappings":"qHA8BA,IAlBgC,SAACA,GAC/B,IAAMC,EAASD,EAAMC,OACrB,OACE,uBAAKC,UAAU,eACb,wBACEA,UAAU,SACVC,MAAOF,EAAOG,IACdC,QAAS,kBAAMC,EAAAA,EAAAA,IAAGL,EAAOG,OAEzB,uBAAKG,IAAKN,EAAOO,UAAWC,IAAKR,EAAOS,QACxC,4BAAOT,EAAOS,QAEfV,EAAMW,MAAQ,qBAAGT,UAAU,SAAQU,EAAAA,EAAAA,IAAQZ,EAAMW,OACjDX,EAAMa,S,6ECvBPC,EAAmC,CACvCC,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,KAAM,IACNC,KAAM,KACNC,KAAM,KACNC,MAAO,KACPC,KAAM,KACNC,KAAM,KACNC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,UAAW,KACXC,WAAY,KACZC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,eAAgB,KAChBC,eAAgB,KAChBC,kBAAmB,MACnBC,qBAAsB,KACtBC,eAAgB,KAChBC,SAAU,KACVC,gBAAiB,KACjBC,KAAM,KACNC,UAAW,KACXC,MAAO,KACPC,KAAM,KACNC,UAAW,KACXC,MAAO,KACPC,SAAU,M,UCZZ,EAZoC,SAAC,GAAiB,IAAfC,EAAe,EAAfA,KAAM5C,EAAS,EAATA,GAC3C,OACE,gBAAC,EAAA6C,KAAD,CACEjD,UAAU,cACVkD,GAAI9C,GAAE,cAAqB+C,EAAAA,EAAAA,IAAOH,EAAKI,MAAM,GAC7CC,OAAQjD,EAAK,SAAW,SDsB9B,SAAgBkD,GAAD,OAA2B1C,EAAS0C,EAAMC,MAAM,GAAI,KAAO,GCpBnEC,CAASR,EAAKM,OALjB,IAK0BN,EAAKI,Q,uDCEnC,IATsC,SAACtD,GACrC,IAAM2D,EAAgB3D,EAAM4D,KAAZ,gBAAgC5D,EAAM6D,OACtD,OACE,gBAAC,EAAAV,KAAD,CAAMjD,UAAU,oBAAoBkD,GAAIO,EAAYJ,OAAO,UACxDvD,EAAM8D,KAAMC,EAAAA,EAAAA,IAAU/D,EAAM6D,OAAQ7D,EAAM8D,KAA1C,IAAqD9D,EAAM6D,U,4ICPnD,SAASG,EAAUhE,GAChC,IAAMiE,GAAWC,EAAAA,EAAAA,KAEjB,OACE,gBAAC,IAAD,CAAQhE,UAAU,aAChB,uBAAKA,UAAU,6BACb,2BACGF,EAAMkD,KAAKiB,mBAAmBC,MAAMC,KAAI,YAAmB,IAAhBC,EAAgB,EAAhBA,KACpCC,EAAWD,EAAKC,SAEtB,OACE,uBAAKrE,UAAU,OAAOsE,IAAKF,EAAKT,QAC9B,gBAAC,IAAD,CACE5D,OAAQqE,EAAKrE,OACbU,KAAM2D,EAAKG,UACX5D,MACE,gBAAC,IAAD,CAAW+C,KAAMK,EAASL,KAAMC,OAAQS,EAAKT,WAGjD,uBAAK3D,UAAU,aACb,gBAAC,IAAD,CAAUgD,KAAMqB,IAChB,gBAAC,EAAApB,KAAD,CAAMjD,UAAU,QAAQkD,GAAE,WAAakB,EAAKT,QACzCS,EAAKnE","sources":["webpack://gg/./src/components/author/index.tsx","webpack://gg/./src/utils/emoji.ts","webpack://gg/./src/components/category/index.tsx","webpack://gg/./src/components/issues_num/index.tsx","webpack://gg/./src/pages/index.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { go, fmtDate } from '@utils/tools';\n\nimport './index.scss';\n\ninterface AuthorProps {\n  author: any;\n  date?: Date;\n  extra?: React.ReactNode;\n}\n\nconst Author: FC<AuthorProps> = (props) => {\n  const author = props.author;\n  return (\n    <div className=\"author-info\">\n      <span\n        className=\"author\"\n        title={author.url}\n        onClick={() => go(author.url)}\n      >\n        <img src={author.avatarUrl} alt={author.login} />\n        <span>{author.login}</span>\n      </span>\n      {props.date && <i className=\"date\">{fmtDate(props.date)}</i>}\n      {props.extra}\n    </div>\n  );\n};\n\nexport default Author;\n","// https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md\n\nconst emojiMap: Record<string, string> = {\n  zap: '⚡',\n  gear: '⚙️',\n  beer: '🍺',\n  star: '⭐',\n  fire: '🔥',\n  tada: '🎉',\n  ninja: '🥷',\n  mega: '📣',\n  crab: '🦀',\n  rocket: '🚀',\n  warning: '⚠️',\n  unicorn: '🦄',\n  lobster: '🦞',\n  cyclone: '🌀',\n  rainbow: '🌈',\n  computer: '💻',\n  nail_care: '💅',\n  sunglasses: '😎',\n  see_no_evil: '🙈',\n  crystal_ball: '🔮',\n  monocle_face: '🧐',\n  speech_balloon: '💬',\n  exploding_head: '🤯',\n  hammer_and_wrench: '🛠️',\n  globe_with_meridians: '🌐',\n  page_facing_up: '📄',\n  thinking: '🤔',\n  sparkling_heart: '💖',\n  boom: '💥',\n  collision: '💥',\n  anger: '💢',\n  book: '📖',\n  open_book: '📖',\n  books: '📚',\n  game_die: '🎲'\n}\n\nexport default (emoji: string): string => emojiMap[emoji.slice(1, -1)] || '';","import React, { FC } from 'react';\nimport { Link } from 'gatsby';\n\nimport getEmoji from '@utils/emoji';\nimport { fmtURI } from '@utils/tools';\n\nimport './index.scss';\n\ninterface CategoryProps {\n  data: any;\n  go?: string;\n}\n\nconst Category: FC<CategoryProps> = ({ data, go }) => {\n  return (\n    <Link\n      className=\"gg-category\"\n      to={go ? go : `/category/${fmtURI(data.name, true)}`}\n      target={go ? '_blank' : '_self'}\n    >\n      {getEmoji(data.emoji)} {data.name}\n    </Link>\n  );\n};\n\nexport default Category;\n","import React, { FC } from 'react';\nimport { Link } from 'gatsby';\n\nimport { fmtIssues } from '@utils/tools';\n\nimport './index.scss';\n\ninterface IssuesNumProps {\n  repo: string;\n  number: number;\n  len?: number;\n}\n\nconst IssuesNum: FC<IssuesNumProps> = (props) => {\n  const issuesLink = `${props.repo}/discussions/${props.number}`;\n  return (\n    <Link className=\"number issues-num\" to={issuesLink} target=\"_blank\">\n      {props.len ? fmtIssues(props.number, props.len) : `#${props.number}`}\n    </Link>\n  );\n};\n\nexport default IssuesNum;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '@layouts/base';\nimport useSite from '@hooks/useSite';\nimport Author from '@comps/author';\nimport Category from '@comps/category';\nimport IssuesNum from '@comps/issues_num';\nimport '@styles/home.scss';\n\nexport default function IndexPage(props: any) {\n  const siteData = useSite();\n\n  return (\n    <Layout className=\"home-page\">\n      <div className=\"markdown-body issues-list\">\n        <div>\n          {props.data.allDiscussionsJson.nodes.map(({ node }: any) => {\n            const category = node.category;\n\n            return (\n              <div className=\"item\" key={node.number}>\n                <Author\n                  author={node.author}\n                  date={node.updatedAt}\n                  extra={\n                    <IssuesNum repo={siteData.repo} number={node.number} />\n                  }\n                />\n                <div className=\"post-info\">\n                  <Category data={category} />\n                  <Link className=\"title\" to={`/issues/${node.number}`}>\n                    {node.title}\n                  </Link>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  {\n    allDiscussionsJson {\n      nodes {\n        node {\n          number\n          title\n          updatedAt\n          author {\n            avatarUrl\n            login\n            url\n          }\n          category {\n            name\n            isAnswerable\n            emoji\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["props","author","className","title","url","onClick","go","src","avatarUrl","alt","login","date","fmtDate","extra","emojiMap","zap","gear","beer","star","fire","tada","ninja","mega","crab","rocket","warning","unicorn","lobster","cyclone","rainbow","computer","nail_care","sunglasses","see_no_evil","crystal_ball","monocle_face","speech_balloon","exploding_head","hammer_and_wrench","globe_with_meridians","page_facing_up","thinking","sparkling_heart","boom","collision","anger","book","open_book","books","game_die","data","Link","to","fmtURI","name","target","emoji","slice","getEmoji","issuesLink","repo","number","len","fmtIssues","IndexPage","siteData","useSite","allDiscussionsJson","nodes","map","node","category","key","updatedAt"],"sourceRoot":""}